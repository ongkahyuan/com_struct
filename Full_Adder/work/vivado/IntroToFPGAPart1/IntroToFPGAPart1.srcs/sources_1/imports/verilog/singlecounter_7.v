/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module singlecounter_7 (
    input clk,
    input rst,
    input inc,
    output reg [3:0] value,
    output reg a,
    output reg b,
    output reg cout
  );
  
  
  
  reg [3:0] M_val_d, M_val_q = 1'h0;
  reg [0:0] M_aa_d, M_aa_q = 1'h0;
  reg [0:0] M_bb_d, M_bb_q = 1'h0;
  reg [0:0] M_cc_d, M_cc_q = 1'h0;
  
  always @* begin
    M_val_d = M_val_q;
    M_aa_d = M_aa_q;
    M_bb_d = M_bb_q;
    M_cc_d = M_cc_q;
    
    value[0+3-:4] = M_val_q;
    a = M_aa_q;
    b = M_bb_q;
    cout = M_cc_q;
    if (inc) begin
      if (M_val_q == 3'h7) begin
        M_val_d = 1'h0;
      end else begin
        M_val_d = M_val_q + 1'h1;
      end
      
      case (M_val_q)
        1'h0: begin
          M_aa_d = 1'h0;
          M_bb_d = 1'h0;
          M_cc_d = 1'h0;
        end
        1'h1: begin
          M_aa_d = 1'h0;
          M_bb_d = 1'h0;
          M_cc_d = 1'h1;
        end
        2'h2: begin
          M_aa_d = 1'h0;
          M_bb_d = 1'h1;
          M_cc_d = 1'h0;
        end
        2'h3: begin
          M_aa_d = 1'h1;
          M_bb_d = 1'h0;
          M_cc_d = 1'h0;
        end
        3'h4: begin
          M_aa_d = 1'h0;
          M_bb_d = 1'h1;
          M_cc_d = 1'h1;
        end
        3'h5: begin
          M_aa_d = 1'h1;
          M_bb_d = 1'h0;
          M_cc_d = 1'h1;
        end
        3'h6: begin
          M_aa_d = 1'h1;
          M_bb_d = 1'h1;
          M_cc_d = 1'h0;
        end
        3'h7: begin
          M_aa_d = 1'h1;
          M_bb_d = 1'h1;
          M_cc_d = 1'h1;
        end
      endcase
    end
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_val_q <= 1'h0;
      M_aa_q <= 1'h0;
      M_bb_q <= 1'h0;
      M_cc_q <= 1'h0;
    end else begin
      M_val_q <= M_val_d;
      M_aa_q <= M_aa_d;
      M_bb_q <= M_bb_d;
      M_cc_q <= M_cc_d;
    end
  end
  
endmodule
