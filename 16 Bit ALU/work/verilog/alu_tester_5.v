/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu_tester_5 (
    input clk,
    input rst,
    input [23:0] io_dip,
    input state_change_btn,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    output reg [23:0] io_led
  );
  
  
  
  wire [1-1:0] M_button_cond_out;
  reg [1-1:0] M_button_cond_in;
  button_conditioner_2 button_cond (
    .clk(clk),
    .in(M_button_cond_in),
    .out(M_button_cond_out)
  );
  wire [1-1:0] M_edge_out;
  reg [1-1:0] M_edge_in;
  edge_detector_3 L_edge (
    .clk(clk),
    .in(M_edge_in),
    .out(M_edge_out)
  );
  localparam A_state = 2'd0;
  localparam B_state = 2'd1;
  localparam OUT_state = 2'd2;
  
  reg [1:0] M_state_d, M_state_q = A_state;
  reg [15:0] M_a_d, M_a_q = 1'h0;
  reg [15:0] M_b_d, M_b_q = 1'h0;
  reg [15:0] M_o_d, M_o_q = 1'h0;
  reg [5:0] M_alufn_d, M_alufn_q = 1'h0;
  
  reg state_change;
  
  wire [1-1:0] M_alu_z;
  wire [1-1:0] M_alu_v;
  wire [1-1:0] M_alu_n;
  wire [16-1:0] M_alu_out;
  alu_16_bit_41 alu (
    .alufn(M_alufn_q),
    .a(M_a_q),
    .b(M_b_q),
    .z(M_alu_z),
    .v(M_alu_v),
    .n(M_alu_n),
    .out(M_alu_out)
  );
  
  always @* begin
    M_state_d = M_state_q;
    M_a_d = M_a_q;
    M_b_d = M_b_q;
    M_alufn_d = M_alufn_q;
    M_o_d = M_o_q;
    
    M_button_cond_in = state_change_btn;
    M_edge_in = M_button_cond_out;
    state_change = M_edge_out;
    io_sel = 4'he;
    io_seg = 8'h00;
    M_o_d = M_alu_out;
    io_led = 24'h000000;
    io_led[16+0+5-:6] = M_alufn_q;
    M_alufn_d = io_dip[16+0+5-:6];
    
    case (M_state_q)
      A_state: begin
        M_a_d = {io_dip[8+7-:8], io_dip[0+7-:8]};
        io_led[0+15-:16] = {M_a_q[8+7-:8], M_a_q[0+7-:8]};
        io_led[16+6+1-:2] = 2'h2;
        io_seg = 8'h88;
        if (state_change) begin
          M_state_d = B_state;
        end
      end
      B_state: begin
        M_b_d = {io_dip[8+7-:8], io_dip[0+7-:8]};
        io_led[0+15-:16] = {M_b_q[8+7-:8], M_b_q[0+7-:8]};
        io_led[16+6+1-:2] = 2'h1;
        io_seg = 8'h83;
        if (state_change) begin
          M_state_d = OUT_state;
        end
      end
      OUT_state: begin
        io_led[0+15-:16] = {M_o_q[8+7-:8], M_o_q[0+7-:8]};
        io_led[16+6+1-:2] = 2'h3;
        io_seg = 8'hc0;
        if (state_change) begin
          M_state_d = A_state;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_a_q <= 1'h0;
      M_b_q <= 1'h0;
      M_o_q <= 1'h0;
      M_alufn_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_a_q <= M_a_d;
      M_b_q <= M_b_d;
      M_o_q <= M_o_d;
      M_alufn_q <= M_alufn_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
