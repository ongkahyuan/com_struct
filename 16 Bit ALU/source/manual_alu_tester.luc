// Manual tester for 16bit ALU:
// uses right button on IO Shield to transition between states A, B and output
// states A and B allow user to input values respectively using the DIP switches on IO Shield
// at state output (out), LEDs on IO shield show output from ALU.
// ALUFN (signal/opcode) can be input at any state.
// A flaw of this tester is that computations on the ALU cannot be done iteratively, 
// since the output of each round of computation is not reused as input A
// manual_alu_tester
module manual_alu_tester (
    input clk,  // clock
    input rst,  // reset
    input io_dip [3][8],       // DIP switches on IO Shield
    input io_button [5],       // 5 buttons on IO Shield 
    // io_button[0] is up, io_button[1] is center, io_button[2] is down, io_button[3] is left, and io_button[4] is right.
    output io_seg[8],          // 7-segment LEDs on IO Shield
    output io_sel[4],          // Digit select on IO Shield
    output io_led [3][8]       // LEDs on IO Shield
  ) {
  
  button_conditioner button_cond(.clk(clk));
  edge_detector detectPress(#RISE(1), #FALL(0), .clk(clk));
  // initialising d flip-flops for a & b input values, output value and alufn signal
  dff a[16](#INIT(0), .clk(clk), .rst(rst));
  dff b[16](#INIT(0), .clk(clk), .rst(rst));
  dff out[16](#INIT(0), .clk(clk), .rst(rst));
  dff alufn[6](#INIT(0), .clk(clk), .rst(rst));
  fsm state(.clk(clk), .rst(rst)) = {A, B, OUTPUT};
  
  sig change_state;
  
  alu_16_bit alu;

  always {
    
    alu.a = a.q;
    alu.b = b.q;
    alu.alufn = alufn.q;
    
    // change state of FSM whenever right button is pressed
    button_cond.in = io_button[4];
    detectPress.in = button_cond.out;
    change_state = detectPress.out;
    
    io_sel = ~4h1;       // select first digit only
    io_seg = 8b00000000; // light up all segments of first digit
    
    // set input of out d flip-flop to be output of alu
    out.d = alu.out;
    // set input alufn signal of alu to be first 6 dip switches of 3rd block
    alufn.d = io_dip[2][5:0];
    
    io_led = 3x{{8h00}}; // turn all LEDs off
    io_led[2][5:0] = alufn.q; // LEDs of 3rd block represent alufn signal
    
    case (state.q){
      state.A : 
        // input of first 2 8-input dip switch blocks on IO shield is input of A
        a.d = c{ io_dip[1], io_dip[0] };
        // LED lights up corresponding to input value of A (16 LEDs --> 16 bit input)
        io_led[1:0] = { a.q[15:8] , a.q[7:0] }; 
        io_seg = 8b10001000; // light up segments to display letter 'A'  
        // press right button to change to next state
        if(change_state)
          state.d = state.B;
        
        
      state.B :
        // input of first 2 8-input dip switch blocks on IO shield is input of B
        b.d = c{ io_dip[1], io_dip[0] };
        // LED lights up corresponding to input value of B (16 LEDs --> 16 bit input)
        io_led[1:0] = { b.q[15:8] , b.q[7:0] }; 
        io_seg = 8b10000011; // light up segments to display letter 'b' (because B looks like 8)
        // press right button to change to next state
        if(change_state)
          state.d = state.OUTPUT;
          
        
      state.OUTPUT : 
        io_led[1:0] = { out.q[15:8] , out.q[7:0] };
        io_seg = 8b11000000; // light up segments to display letter 'O'
        // press right button to change to next state
        if(change_state)
          state.d = state.A;
        
      }
    
    
  }
}
